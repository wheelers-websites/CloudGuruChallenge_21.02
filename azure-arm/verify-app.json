{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "name": {
            "type": "string"
        },
        "location": {
            "type": "string"
        },
        "locationName": {
            "type": "string"
        },
        "hostingPlanName": {
            "type": "string"
        },
        "serverFarmResourceGroup": {
            "type": "string"
        },
        "workerSize": {
            "type": "string"
        },
        "workerSizeId": {
            "type": "string"
        },
        "numberOfWorkers": {
            "type": "string"
        },
        "storageAccountName": {
            "type": "string"
        }
    },
    "variables": {},
    "resources": [
        {
            "name": "[concat(parameters('name'), '/default')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/notebookWorkspaces",
            "properties": {},
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
            ],
            "apiVersion": "2020-04-01"
        },
        {
            "apiVersion": "2020-04-01",
            "kind": "GlobalDocumentDB",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('name')]",
            "location": "[parameters('location')]",
            "properties": {
                "databaseAccountOfferType": "Standard",
                "locations": [
                    {
                        "id": "[concat(parameters('name'), '-', parameters('location'))]",
                        "failoverPriority": 0,
                        "locationName": "[parameters('locationName')]"
                    }
                ],
                "backupPolicy": {
                    "type": "Periodic",
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 8
                    }
                },
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "ipRules": [],
                "dependsOn": [],
                "enableMultipleWriteLocations": false,
                "capabilities": [],
                "enableFreeTier": true
            },
            "tags": {
                "Project": "[parameters('project')]",
                "Name": "[parameters('name')]",
                "CosmosAccountType": "Non-Production"
            }
        },
        {
            "apiVersion": "2018-11-01",
            "name": "[parameters('name')]",
            "type": "Microsoft.Web/sites",
            "location": "[parameters('locationName')]",
            "tags": {
                "Project": "[parameters('project')]",
                "Name": "[parameters('name')]",
            },
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
            ],
            "properties": {
                "name": "[parameters('name')]",
                "siteConfig": {
                    "appSettings": [],
                    "linuxFxVersion": "RUBY|2.6",
                    "alwaysOn": true
                },
                "serverFarmId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('serverFarmResourceGroup'), '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "clientAffinityEnabled": false
            }
        },
        {
            "apiVersion": "2018-11-01",
            "name": "[parameters('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('locationName')]",
            "kind": "linux",
            "tags": {
                "Project": "[parameters('project')]",
                "Name": "[parameters('name')]",
            },
            "dependsOn": [],
            "properties": {
                "name": "[parameters('hostingPlanName')]",
                "workerSize": "[parameters('workerSize')]",
                "workerSizeId": "[parameters('workerSizeId')]",
                "numberOfWorkers": "[parameters('numberOfWorkers')]",
                "reserved": true
            },
            "sku": {
                "Tier": "Standard",
                "Name": "S1"
            }
        },
        {
            "name": "[parameters('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "location": "[parameters('location')]",
            "properties": {
                "accessTier": "Hot",
                "minimumTlsVersion": "TLS1_2",
                "supportsHttpsTrafficOnly": true,
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow",
                    "ipRules": []
                }
            },
            "dependsOn": [],
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "tags": {
                "Project": "[parameters('project')]",
                "Name": "[parameters('name')]"
            }
        },
		{
		  "type": "Microsoft.Network/frontDoors",
		  "apiVersion": "2020-07-01",
		  "name": "[parameters('frontDoorName')]",
		  "location": "global",
		  "properties": {
			"routingRules": [
			  {
				"name": "routingRule1",
				"properties": {
				  "frontendEndpoints": [
					{
					  "id": "[resourceId('Microsoft.Network/frontDoors/frontendEndpoints', parameters('frontDoorName'), 'frontendEndpoint1')]"
					}
				  ],
				  "acceptedProtocols": [
					"Http",
					"Https"
				  ],
				  "patternsToMatch": [
					"/*"
				  ],
				  "routeConfiguration": {
					"@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
					"forwardingProtocol": "MatchRequest",
					"backendPool": {
					  "id": "[resourceId('Microsoft.Network/frontDoors/backendPools', parameters('frontDoorName'), 'backendPool1')]"
					}
				  },
				  "enabledState": "Enabled"
				}
			  }
			],
			"healthProbeSettings": [
			  {
				"name": "healthProbeSettings1",
				"properties": {
				  "path": "/",
				  "protocol": "Http",
				  "intervalInSeconds": 120
				}
			  }
			],
			"loadBalancingSettings": [
			  {
				"name": "loadBalancingSettings1",
				"properties": {
				  "sampleSize": 4,
				  "successfulSamplesRequired": 2
				}
			  }
			],
			"backendPools": [
			  {
				"name": "backendPool1",
				"properties": {
				  "backends": [
					{
					  "address": "[parameters('backendAddress')]",
					  "backendHostHeader": "[parameters('backendAddress')]",
					  "httpPort": 80,
					  "httpsPort": 443,
					  "weight": 50,
					  "priority": 1,
					  "enabledState": "Enabled"
					}
				  ],
				  "loadBalancingSettings": {
					"id": "[resourceId('Microsoft.Network/frontDoors/loadBalancingSettings', parameters('frontDoorName'), 'loadBalancingSettings1')]"
				  },
				  "healthProbeSettings": {
					"id": "[resourceId('Microsoft.Network/frontDoors/healthProbeSettings', parameters('frontDoorName'), 'healthProbeSettings1')]"
				  }
				}
			  }
			],
			"frontendEndpoints": [
			  {
				"name": "frontendEndpoint1",
				"properties": {
				  "hostName": "[concat(parameters('frontDoorName'), '.azurefd.net')]",
				  "sessionAffinityEnabledState": "Disabled"
				}
			  }
			],
			"enabledState": "Enabled"
		  }
		}
    ],
    "outputs": {}
}