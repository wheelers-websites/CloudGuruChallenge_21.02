<h1>Editing User</h1>

<%= render 'form', user: @user %>

<div id="content">
  <div>
    <video id="video">Video Not Available</video>
    <br/>
    <button id="photo-btn" disabled>Save Photo</button>
    <button id="voice-btn">Save Voice</button>
  </div>
  <canvas id="canvas"></canvas>
  <p>
    disclaimers: a) pictures taken here will be publicly available, b) intended for educational purposes only
  </p>
</div>

<%= link_to 'Show', @user %> |
<%= link_to 'Back', users_path %>


<script>
    $(document).on('turbolinks:load', function() {

        // ruby variables
        let userId = "<%= @user.id %>";
        let azSaToken = "<%= ENV['STORAGE_SAS'] %>".replaceAll("&amp;", "&");

        // azure variables
        let azBlobUrl = 'https://wheelerverifyapp.blob.core.windows.net/users'

        // document elements
        let canvas = document.getElementById('canvas');
        let video = document.getElementById('video');
        let photo_button = document.getElementById('photo-btn');
        let voice_button = document.getElementById('voice-btn');

        // image dimensions
        let height = 480;
        let width = 640;

        // local state
        let streaming = false;

        // stream user media
        if(canvas != null && video != null) {

            navigator.mediaDevices
              .getUserMedia({video: true, audio: false})
              .then(function (stream) {
                  video.srcObject = stream;
                  video.play();
                  photo_button.disabled = false;
              })
              .catch(function (err) {
                  console.log(err);
              });

            // set image dimensions
            video.addEventListener('click', function () {
                if (!streaming) {
                    canvas.setAttribute('width', width.toString());
                    canvas.setAttribute('height', height.toString());
                    video.setAttribute('width', width.toString());
                    video.setAttribute('height', height.toString());
                    streaming = true;
                }
            }, false);
            video.click();
        }

        // configure click handler to save the photo
        if (photo_button != null) {
            photo_button.addEventListener('click', async function (event) {

                // disable button
                let timeout = 3000;
                photo_button.innerText = "Saving... ";
                photo_button.disabled = true;

                savePhoto();

                // enable button
                await sleep(timeout);
                photo_button.innerText = "Save Photo";
                photo_button.disabled = false;

                event.preventDefault();

            }, false);
        }

        // configure click handler to save the voice
        if (voice_button != null) {
            voice_button.addEventListener('click', async function (event) {

                // disable button
                let timeout = 10000;
                voice_button.innerText = "Saving... ";
                voice_button.disabled = true;

                // start recording
                const recorder = await saveVoice();
                recorder.start();

                // capture recording
                await sleep(timeout);
                const audio = await recorder.stop();

                $.ajax({
                    url: getBlobUrl('voice.mp3'),
                    type: 'PUT',
                    contentType: 'audio/mpeg',
                    data: audio.audioBlob,
                    processData: false,
                    headers: {
                        'x-ms-blob-type': 'BlockBlob',
                        'x-ms-date': new Date().toGMTString(),
                        'x-ms-version': '2020-02-10'
                    }
                });

                // playback recording
                voice_button.innerText = "Playing...";
                audio.play();
                await sleep(timeout);

                // enable button
                voice_button.innerText = "Save Voice";
                voice_button.disabled = false;

                event.preventDefault();

            }, false);
        }

        function savePhoto() {

            if(canvas == null){
                return;
            }

            canvas.height = height;
            canvas.width = width;

            let context = canvas.getContext('2d');
            context.drawImage(video, 0, 0, width, height);

            canvas.toBlob(function(b) {

                if(b === null){
                    console.log('image blob is invalid');
                    return;
                }

                $.ajax({
                    url: getBlobUrl('photo.png'),
                    type: 'PUT',
                    contentType: 'image/png',
                    data: b,
                    processData: false,
                    headers: {
                        'x-ms-blob-type': 'BlockBlob',
                        'x-ms-date': new Date().toGMTString(),
                        'x-ms-version': '2020-02-10'
                    }
                });

                console.log('image captured');
            });
        }

        const saveVoice = () =>
            new Promise(async resolve => {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                const mediaRecorder = new MediaRecorder(stream);
                const audioChunks = [];

                mediaRecorder.addEventListener("dataavailable", event => {
                    audioChunks.push(event.data);
                });

                const start = () => mediaRecorder.start();

                const stop = () =>
                  new Promise(resolve => {
                      mediaRecorder.addEventListener("stop", () => {
                          const audioBlob = new Blob(audioChunks);
                          const audioUrl = URL.createObjectURL(audioBlob);
                          const audio = new Audio(audioUrl);
                          const play = () => audio.play();
                          resolve({ audioBlob, audioUrl, play });
                      });

                      mediaRecorder.stop();
                  });

                resolve({ start, stop });
            });

        function getBlobUrl(type){
            if(azBlobUrl == null || userId == null || type == null || azSaToken == null){
                console.log("getBlobUrl: parameters are null")
                return "";
            }
            return `${azBlobUrl}/${userId}/${type}?${azSaToken}`;
        }

        const sleep = time => new Promise(resolve => setTimeout(resolve, time));
    });
</script>